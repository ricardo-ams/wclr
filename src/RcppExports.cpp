// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// clr_lloyd_cpp
Rcpp::List clr_lloyd_cpp(arma::mat& U, const arma::mat& X, const arma::colvec& y, const double m, const int itermax, const bool trace);
RcppExport SEXP _wclr_clr_lloyd_cpp(SEXP USEXP, SEXP XSEXP, SEXP ySEXP, SEXP mSEXP, SEXP itermaxSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type m(mSEXP);
    Rcpp::traits::input_parameter< const int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< const bool >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(clr_lloyd_cpp(U, X, y, m, itermax, trace));
    return rcpp_result_gen;
END_RCPP
}
// kmeans_lloyd_cpp
Rcpp::List kmeans_lloyd_cpp(arma::mat& U, const arma::mat& X, const arma::colvec& y, const double m, const int itermax, const bool trace);
RcppExport SEXP _wclr_kmeans_lloyd_cpp(SEXP USEXP, SEXP XSEXP, SEXP ySEXP, SEXP mSEXP, SEXP itermaxSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type m(mSEXP);
    Rcpp::traits::input_parameter< const int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< const bool >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(kmeans_lloyd_cpp(U, X, y, m, itermax, trace));
    return rcpp_result_gen;
END_RCPP
}
// kplane_lloyd_cpp
Rcpp::List kplane_lloyd_cpp(arma::mat& U, const arma::mat& X, const arma::colvec& y, const double gamma, const double m, const int itermax, const bool trace);
RcppExport SEXP _wclr_kplane_lloyd_cpp(SEXP USEXP, SEXP XSEXP, SEXP ySEXP, SEXP gammaSEXP, SEXP mSEXP, SEXP itermaxSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const double >::type m(mSEXP);
    Rcpp::traits::input_parameter< const int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< const bool >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(kplane_lloyd_cpp(U, X, y, gamma, m, itermax, trace));
    return rcpp_result_gen;
END_RCPP
}
// wclr_lloyd_cpp
Rcpp::List wclr_lloyd_cpp(arma::mat& U, const arma::mat& X, const arma::colvec& y, const double alpha, const double m, const std::string wnorm, const int itermax, const bool trace);
RcppExport SEXP _wclr_wclr_lloyd_cpp(SEXP USEXP, SEXP XSEXP, SEXP ySEXP, SEXP alphaSEXP, SEXP mSEXP, SEXP wnormSEXP, SEXP itermaxSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type m(mSEXP);
    Rcpp::traits::input_parameter< const std::string >::type wnorm(wnormSEXP);
    Rcpp::traits::input_parameter< const int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< const bool >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(wclr_lloyd_cpp(U, X, y, alpha, m, wnorm, itermax, trace));
    return rcpp_result_gen;
END_RCPP
}
// swclr_lloyd_cpp
Rcpp::List swclr_lloyd_cpp(arma::mat& U, const arma::mat& X, const arma::colvec& y, const double m, const std::string wnorm, const std::string balance, const int itermax, const bool trace);
RcppExport SEXP _wclr_swclr_lloyd_cpp(SEXP USEXP, SEXP XSEXP, SEXP ySEXP, SEXP mSEXP, SEXP wnormSEXP, SEXP balanceSEXP, SEXP itermaxSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type U(USEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const double >::type m(mSEXP);
    Rcpp::traits::input_parameter< const std::string >::type wnorm(wnormSEXP);
    Rcpp::traits::input_parameter< const std::string >::type balance(balanceSEXP);
    Rcpp::traits::input_parameter< const int >::type itermax(itermaxSEXP);
    Rcpp::traits::input_parameter< const bool >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(swclr_lloyd_cpp(U, X, y, m, wnorm, balance, itermax, trace));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_wclr_clr_lloyd_cpp", (DL_FUNC) &_wclr_clr_lloyd_cpp, 6},
    {"_wclr_kmeans_lloyd_cpp", (DL_FUNC) &_wclr_kmeans_lloyd_cpp, 6},
    {"_wclr_kplane_lloyd_cpp", (DL_FUNC) &_wclr_kplane_lloyd_cpp, 7},
    {"_wclr_wclr_lloyd_cpp", (DL_FUNC) &_wclr_wclr_lloyd_cpp, 8},
    {"_wclr_swclr_lloyd_cpp", (DL_FUNC) &_wclr_swclr_lloyd_cpp, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_wclr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
